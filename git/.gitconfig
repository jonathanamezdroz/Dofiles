# .gitconfig
# Yves Chevallier 2017
[user]
    name  = Yves Chevallier
    email = nowox@x0x.ch

[core]
	editor = vim       # Because by default it's vi and vi is not always mapped to vim
    ignorecase = false
    autocrlf = false   # On cygwin I always work wtih LF
    filemode = false
    compression = 0    # Faster on Cygwin
    whitespace = cr-at-eol

[help]
    autocorrect = 1 # 0.1 seconds to autocorrect mistypen commands.

[color]
    ui = auto

[web]
    browser = google-chrome

[github]
    user  = nowox
    token = token

[log]
    date = iso      

[format]
    pretty = "%C(bold blue)%h %C(bold green)%<|(20)% ar%C(reset) %C(white)% s\
%C(dim white) -% an%C(reset)\
%C(auto)% d\
%C(bold red)% N"

[advice]
  pushNonFastForward = false
  statusHints = false
  commitBeforeMerge = false
  resolveConflict = false
  implicitIdentity = false
  detachedHead = false

[color "grep"]
    linenumber = yellow bold
    match = red
    filename = green
    function = magenta

[color "status"]
    untracked = blue
    header = yellow bold
    deleted = magenta

[rerere]
    enabled = true
    autoUpdate = true


[rebase] 
    stat = true

[pull] 
    rebase = true

[push]
    default = simple

[grep] 
    patternType = perl
    lineNumber = true

[diff]
    tool = bc4

[difftool]
    prompt = false

[difftool "bc4"]
    cmd = "\"/cygdrive/c/Program Files (x86)/Beyond Compare 4/Bcomp.exe\" \"$(cygpath -w \"$LOCAL\")\" \"$(cygpath -w \"$REMOTE\")\" /lefttitle=\"$(cygpath -w \"$LOCAL\")\" /righttitle=\"$(cygpath -w \"$REMOTE\")\""

[merge]
    tool = bc4

[log]
    abbrevCommit = true
    decorate = true

[mergetool]
    prompt = false
    keepBackup = false
    keepTemporaries = true

[mergetool "bc4"]
    cmd = "\"/cygdrive/c/Program Files (x86)/Beyond Compare 4/Bcomp.exe\" \"$(cygpath -w \"$LOCAL\")\" \"$(cygpath -w \"$REMOTE\")\" \"$(cygpath -w \"$BASE\")\" \"$(cygpath -w \"$MERGED\")\""

[alias]
    # Checkout
    o  = checkout
    ob = checkout -b

    # Move HEAD forward/Backward
    fw = "!git log --pretty=oneline --all | grep -B1 `git rev-parse HEAD` | head -n1 | egrep -o '[a-f0-9]{20,}' | xargs git checkout"
    bw = "!git checkout HEAD~1"

    # Branches
    b  = branch
    lb = "!for k in `git branch | perl -pe s/^..//`; do echo -e `git show --pretty=format:'%Cgreen%ci%x08%x08%x08%x08%x08%x08 %Cblue%cr%Creset' $k -- | head -n 1`\t$k; done | sort -r"

    # Commit
    c   = commit
    ca  = commit -a               # Stage all modified files
    cm  = commit -m               # Commit with message
    cam = commit -a -m            # Commit all modified files with message

    # Status
    s   = status -s -b            # Status in short format
    su  = status -s -b -uno       # Doesn't show untracked files 
 
    # Diff
    d   = diff
    dh  = diff HEAD               # Diff Filesystem <-> HEAD
    dc  = diff -C --cached        # Diff Staged     <-> HEAD
    ds  = diff -C --ignore-space-at-eol --ignore-space-change
    dt  = difftool

    # Integrity
    fk = fsck                     # Verifies the connectivity and validity of the db
    fu = fsck --unreachable       # List commits unlinked to any reference nodes

    # Grep
    g  = grep --show-function --heading --break -I
    gh = "!f() { git g $2 $(git rev-list --max-count=$1 HEAD); }; f" 

    # Replace
    pie = "!sh -c 'echo \"$0\"; git ls-files -z | xargs -0 perl -pi -e \"$0\" && git ls-files | perl -ne '\"'\"'chomp $_; unlink \"$_.bak\" '\"'\"''"

    # Log / Tree
    l = log -n30 --graph

    # Files
    ls = ls-files

    # Clean
    x = clean -xfd

    # Merge
    m = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip

    # Reset
    r = reset HEAD
    rh = reset --hard HEAD
